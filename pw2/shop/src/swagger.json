{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger - Exercício 01",
    "description": "Crie uma API REST usando o framework Express contendo os endpoints index, create, read, update e delete para os resources usuários e produtos.\n Os atributos de cada resource podem ser escolhidos.\n Após isso, instalar o Swagger (https: //swagger.io/) para documentar a sua API.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API para usuários do sistema"
    },
    {
      "name": "Products",
      "description": "API para os produtos do sistema"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new user in system",
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create new product in system",
        "description": "Create new product in system",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "description": "Product that we want to create",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New product is created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        }
      }
    },
    "/Products/{ProductId}": {
      "parameters": [
        {
          "name": "ProductId",
          "in": "path",
          "required": true,
          "description": "ID of product that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product with given ID",
        "responses": {
          "200": {
            "description": "Product is found",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Product with given ID",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "Product is deleted",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      },
      "put": {
        "summary": "Update Product with give ID",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Product",
            "in": "body",
            "description": "Product with new values of properties",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product is updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": [
        "email",
        "uuid",
        "name"
      ],
      "properties": {
        "uuid": {
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    },
    "Product": {
      "required": [
        "uuid",
        "productName",
        "price"
      ],
      "properties": {
        "uuid": {
          "type": "string",
          "uniqueItems": true
        },
        "productName": {
          "type": "string"
        },
        "price": {
          "type": "number"
        }
      }
    },
    "Products": {
      "type": "array",
      "$ref": "#/definitions/Product"
    }
  }
}